- const getInputName = (property) => `data[${property}]`
- const getInputId = (property) => `data_${property}`

mixin formFor(entity = null)
  form&attributes(attributes)
    block

mixin input(entity, propertyName, errors = {})
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  .mb-3(class=(errors[propertyName] && 'has-danger'))
    label(
      for=inputId
    )= t(`views.form.${propertyName}`)
    input(
      id=inputId
      name=getInputName(propertyName)
      class=classLine
      value=_.get(entity, propertyName)
    )&attributes(attributes)
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')

mixin submit(value)
  input(class='btn btn-primary' type='submit' value=value)&attributes(attributes)

mixin filterSelect(propertyName, options, value, caption, filter)
  - inputId = getInputId(propertyName)
  .col
    .mb-3
      label(for= inputId)= t(`views.form.${propertyName}`)
      select(
        name= propertyName
        class= 'form-select'
        id= inputId
      )&attributes(attributes)
        option(value='null')
        each el in options
          -
            const elValue = _.get(el, value);
            const elCaption = _.get(el, caption);
            const isSelected = Number(filter[propertyName]) === elValue;

          option(value= elValue selected= isSelected)= elCaption

mixin buttonTo(action, method)
  form(action=action, method="post")
    input(name="_method" type="hidden" value=method)
    input(type='submit')&attributes(attributes)

mixin textarea(entity, propertyName)
  - inputId = getInputId(propertyName)
  .mb-3
    label(
      for= inputId
    )= t(`views.form.${propertyName}`)
    textarea(
      class= 'form-control'
      id= inputId
      name= getInputName(propertyName)
      rows= 3
    )&attributes(attributes)= entity[propertyName]

mixin select(entity, propertyName, options, caption, errors = {}, description = '')
  - propertyErrors = _.get(errors, propertyName)
  - classLine = 'form-control' + (_.isEmpty(propertyErrors) ? '' : ' is-invalid')
  - inputId = getInputId(propertyName)
  -
    let id;
    const dataId = _.get(entity, propertyName, '')
    if(!_.isArray(dataId)) id = dataId
    else id = _.map(dataId, (i) => i.id)
  .mb-3(class= (errors[propertyName] && 'has-danger'))
    label(
      for= inputId
    )= t(`views.form.${propertyName}`)
    select(
      name= getInputName(propertyName)
      class= `form-select ${errors[propertyName] ? 'is-invalid' : ''}`
      id= inputId
    )&attributes(attributes)
      option(value= '')= description
      each el in options
        -
          const elValue = _.get(el, 'id');
          const elCaption = _.get(el, caption);
          const isSelected = _.isArray(id) ? _.includes(id, elValue) : id === elValue;

        option(value= elValue selected=isSelected)= elCaption
    if !_.isEmpty(propertyErrors)
      .invalid-feedback= propertyErrors.map(({ message }) => message).join('. ')
